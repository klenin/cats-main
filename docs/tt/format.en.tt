[% PROCESS header.tti title = 'Problem description package format' lang = 'en' %]
[%- MACRO s(m1, m2) BLOCK; m1; ' '; m2; END -%]
[%- MACRO opt BLOCK %]<sup>&nbsp;<a href="#opt" title="Optional attribute">o</a></sup>[% END -%]
[%- MACRO v11 BLOCK %]<sup><a href="#v11" title="Since version 1.1">1.1</a></sup>[% END -%]
[%- MACRO v12 BLOCK %]<sup><a href="#v12" title="Since version 1.2">1.2</a></sup>[% END -%]
[%- MACRO v13 BLOCK %]<sup><a href="#v13" title="Since version 1.3">1.3</a></sup>[% END -%]
[%- MACRO v14 BLOCK %]<sup><a href="#v14" title="Since version 1.4">1.4</a></sup>[% END -%]
[%- MACRO dv14 BLOCK %]<sup><a href="#dv14" title="Deprecated since version 1.4">&minus;1.4</a></sup>[% END -%]
[%- MACRO v15 BLOCK %]<sup><a href="#v15" title="Since version 1.5">1.5</a></sup>[% END -%]
[%- MACRO dv15 BLOCK %]<sup><a href="#dv15" title="Deprecated since version 1.5">&minus;1.5</a></sup>[% END -%]
[%- MACRO v16 BLOCK %]<sup><a href="#v16" title="Since version 1.6">1.6</a></sup>[% END -%]
[%- MACRO v17 BLOCK %]<sup><a href="#v17" title="Since version 1.7">1.7</a></sup>[% END -%]
[%- MACRO v18 BLOCK %]<sup><a href="#v18" title="Since version 1.8">1.8</a></sup>[% END -%]
[%- MACRO v19 BLOCK %]<sup><a href="#v19" title="Since version 1.9">1.9</a></sup>[% END -%]
[%- MACRO v110 BLOCK %]<sup><a href="#v110" title="Since version 1.10">1.10</a></sup>[% END -%]
[%- MACRO v111 BLOCK %]<sup><a href="#v111" title="Since version 1.11">1.11</a></sup>[% END -%]
[%- MACRO tag_in(t1, t2, m1, m2) BLOCK
%]<code>&lt;<a name="[% t1 %]">[% t1 %]</a>&gt;[% IF t2 != '';
  IF m1 != '' %]</code>[% m1 %]<br/><code>[% ELSE %]<br/>[% END
%]&lt;<a href="#[% t2 %]">[% t2 %]</a>&gt;[% END %]</code>[% m2;
END -%]
[%- MACRO tag_ref(t) BLOCK %]<code>&lt;<a href="#[% t %]">[% t %]</a>&gt;</code>[% END -%]
[%- MACRO mem_units BLOCK %](in <a href="#memoryUnits">megabytes or other units</a>)[% END -%]
[%- MACRO stml BLOCK %]<a href="#STML">STML</a>[% END -%]
<h2>Version 1.11</h2>

<p><a href="sample.zip">download sample problem package</a></p>

<p>Problem is stored in a ZIP archive, which should contain exactly one XML file
with the problem descrition in the root directory, and arbitraty number of additional
files with tests, solutions etc.
</p>

<h2>Structure of XML file</h2>

<table class="ft">
<col width="1%"/><col width="40%"><col width="*"/>
<tr>
  <th>Tag name<br/>Parent tag</th> <th>Attributes</th> <th>Comments</th>
</tr>
<tr>
  <td>[% tag_in('CATS') %]</td>
  <td><ul><li>version[% opt %] — version number ("1.4" by default).</li></ul></td>
  <td>Required top-level tag.</td>
</tr>
<tr>
  <td>[% tag_in('Problem', 'CATS') %]</td>
  <td>
    <ul>
      <li>title — problem title in the first language of the <code>lang</code> list.</li>
      <li>lang[% opt %] — comma-separated list[% v110 %] of (natural) languages of the problem text.</li>
      <li>tlimit — time limit for a single test (in seconds).</li>
      <li>mlimit[% v11 %] — memory limit for a single test [% mem_units %].</li>
      <li>wlimit[% opt %] [% v19 %] — write limit for a single test [% mem_units %], default value is 30.</li>
      <li>author[% opt %] — author name.</li>
      <li>inputFile — input file name or <code>*STDIN</code>[% v18 %] or <code>*NONE</code>[% v110 %].</li>
      <li>outputFile — output file name or <code>*STDOUT</code>[% v18 %] or <code>*NONE</code>[% v110 %].</li>
      <li>difficulty[% opt %] [% dv14 %] — author's estimate of the problem difficulty (1 to 100).</li>
      <li>stdChecker[% opt %] [% dv14 %] — standard checker name.</li>
      <li>maxPoints[% opt %] [% v13 %] — maximum number of points per problem, overrides the sum of points for each test.</li>

      <li>saveInputPrefix[% opt %] [% v19 %] —
        store starting part of each generated test up to a given length [% mem_units %].</li>
      <li>saveOutputPrefix[% opt %] [% v19 %] —
        store starting part of submission output on each test up to a given length [% mem_units %].</li>
      <li>saveAnswerPrefix[% opt %] [% v19 %] —
        store starting part of solution output on each test up to a given length [% mem_units %].</li>
    </ul>
  </td>
  <td>Standard checker program compares output file with the answer file for a given test.
    Following standard checkers are defined:
    <ul>
      <li>nums — compares lists of 4-byte integers.</li>
      <li>floats2 — compares lists of long doubles.</li>
      <li>strs — compares lists of short strings (up to 256 characters).</li>
      <li>longnums — compares lists of long unmbers (up to 10000 digits).</li>
      <li>longstrs — compares lists of long strings (up to 10000 characters).</li>
    </ul><br/>
    Since version 1.4, stdChecker attribute is deprecated. It is recommended to use
    [% tag_ref('Import') %] tag instead with the following standard guid's:
    <ul>
      <li>std.nums — checks equivalency of lists of 32-bit integers.</li>
      <li>std.longnums — checks equivalency of arbitrary length unsigned integers.</li>
      <li>std.floats&lt;n&gt;, for n from 2 to 5 — checks equivalency of floating point numbers with precision of n digits.</li>
      <li>std.strs — checks equivalency of arbitrary length strings.</li>
    </ul>
  </td>
</tr>
<tr>
  <td>[% tag_in('Keyword', 'Problem') %]</td>
  <td>
      <ul><li>code — keyword code.</li></ul>
  </td>
  <td>Keyword code must be pre-defined in a system.</td>
</tr>
<tr>
  <td>[% tag_in('ProblemStatement', 'Problem') %]</td>
  <td>
    <ul>
      <li>attachment[% opt %] [% v19 %] — identifier of the [% tag_ref('Attachment') %] object.</li>
      <li>url[% opt %] [% v19 %] — arbitrary URL.</li>
    </ul>
  </td>
  <td>
    Problem statement text in [% stml %] format.
    If attachment or url attribute is present, statement text is replaced by a link.
  </td>
</tr>
<tr>
  <td>[% tag_in('ProblemConstraints', 'Problem') %]</td>
  <td>&nbsp;</td>
  <td>Problem input constraints in [% stml %] format.</td>
</tr>
<tr>
  <td>[% tag_in('InputFormat', 'Problem') %]</td>
  <td>&nbsp;</td>
  <td>Input file format description in [% stml %] format.</td>
</tr>
<tr>
  <td>[% tag_in('OutputFormat', 'Problem') %]</td>
  <td>&nbsp;</td>
  <td>Output file format description in [% stml %] format.</td>
</tr>
<tr>
  <td>[% tag_in('JsonData', 'Problem', v17) %]</td>
  <td>&nbsp;</td>
  <td>Additional data in JSON format.
    Recommended to use [% tag_ref('include') %] tag.</td>
</tr>
<tr>
  <td>[% tag_in('Explanation', 'Problem', v15) %]</td>
  <td>
    <ul>
      <li>attachment[% opt %] [% v19 %] — identifier of the [% tag_ref('Attachment') %] object.</li>
      <li>url[% opt %] [% v19 %] — arbitrary URL.</li>
    </ul>
  </td>
  <td>
    Solution explanation in [% stml %] format.
    If attachment or url attribute is present, explanation text is replaced by a link.
  </td>
</tr>
<tr>
  <td>[% tag_in('Checker', 'Problem') %]</td>
  <td>
    <ul>
      <li>name — object identifier [% tag_ref('Checker') %] (arbitrary string).</li>
      <li>src — path to the source.</li>
      <li>de_code[% opt %] — development environment code.</li>
      <li>style[% opt %] [% v12 %] — checker arguments format, can be one of:
        <ul>
          <li>"legacy" — arguments are <code>input answer output</code>, used by default for backwards compatibility.</li>
          <li>"testlib" — arguments are <code>input output answer</code>, compatible with the testlib library.
          Recommended for new problems.</li>
          <li>"partial" — arguments are similar to testlib.
            Points for test are read from the checker's standard output.</li>
          <li>"multiple"[% v110 %] — arguments are similar to testlib. Used for competitive problems.
            Output file is expected to contain controller log.
            Standard output is expected to contain a line for each agent.
          </li>
        </ul>
      </li>
      <li>export[% opt %] [% v14 %] — global identifier.</li>
      <li>timeLimit[% opt %] [% v17 %] — time limit in seconds.</li>
      <li>memoryLimit[% opt %] [% v17 %] — memory limit [% mem_units %].</li>
      <li>writeLimit[% opt %] [% v19 %] — write limit [% mem_units %].</li>
    </ul>
  </td>
  <td>
    Checker program descriton. This tag is ignored if the problem has stdChecker attribute.
    "src" — is a path to the file relative to the archive root.
    Nested directories are allowed.
    Path is case-sensitive.
    The list of standard development environments:
    <ul>
      <li>1[% v12 %] — None (h;inc)</li>
      <li>2[% v16 %] — Answers in zip (zip)</li>
      <li>101 — Cross-platform C/C++ compiler (cpp;c)</li>
      <li>102 — GNU C++ (cc;cxx)</li>
      <li>103 — MS Visual C++ (cpp;c)</li>
      <li>104 — Borland C++ 3.1 (cpp;c)</li>
      <li>105 — GNU C (c)</li>
      <li>201 — Borland Pascal 7.0 (pas)</li>
      <li>202 — Free Pascal (pp)</li>
      <li>203 — Borland Delphi (dpr)</li>
      <li>301 — Quick Basic (qb) (partially supported)[% v11 %]</li>
      <li>302 — Free Basic (bas) [% v14 %]</li>
      <li>401 — Java (java)[% v13 %]</li>
      <li>402 — C# (cs)[% v16 %]</li>
      <li>501 — Perl (pl)[% v14 %]</li>
      <li>502 — Python (py)[% v16 %]</li>
      <li>503 — Haskell (hs)[% v16 %]</li>
      <li>504 — Ruby (rb)[% v16 %]</li>
    </ul><br/>
    If the de_code is omitted, it is defined by the source file extension
    according to the list above.
    <p>
      Checker's exit code: 0 — OK, 1 — WA, 2 — PE, 3 — Internal error.
    </p>
  </td>
</tr>
<tr>
  <td>[% tag_in('Picture', 'Problem') %]</td>
  <td>
    <ul>
      <li>name — identifier of the [% tag_ref('Picture') %] object (arbitrary string).</li>
      <li>src — path to the image file.</li>
    </ul>
  </td>
  <td>Describes a picture to be inserted into a problem text.</td>
</tr>
<tr>
  <td>[% tag_in('Attachment', 'Problem', v16) %]</td>
  <td>
    <ul>
      <li>name — identifier of the [% tag_ref('Attachment') %] object (arbitrary string).</li>
      <li>src — path to the attachment file.</li>
    </ul>
  </td>
  <td>Arbitrary file available for download from the problem text.</td>
</tr>
<tr>
  <td>[% tag_in('Solution', 'Problem') %]</td>
  <td>
    <ul>
      <li>name — identifier of the [% tag_ref('Solution') %] object.</li>
      <li>src — path to the source code file.</li>
      <li>de_code[% opt %] — development environment code.</li>
      <li>export[% opt %] [% v14 %] — globally unique identifier.</li>
      <li>timeLimit[% opt %] [% v17 %] — time limit in seconds. By default equal to the problem's limit.</li>
      <li>memoryLimit[% opt %] [% v17 %] — memory limit [% mem_units %]. By default equal to the problem's limit.</li>
      <li>writeLimit[% opt %] [% v19 %] — write limit [% mem_units %]. By default equal to the problem's limit.</li>
    </ul>
  </td>
  <td>Description of the jury solution.</td>
</tr>
<tr>
  <td>[% tag_in('Generator', 'Problem') %]</td>
  <td>
    <ul>
      <li>name — identifier of the [% tag_ref('Generator') %] object.</li>
      <li>src — path to the source code file.</li>
      <li>de_code[% opt %] — development environment code.</li>
      <li>outputFile[% opt %] [% v12 %] — input file name or <code>*STDOUT</code>.</li>
      <li>export[% opt %] [% v14 %] — globally unique identifier.</li>
      <li>timeLimit[% opt %] [% v17 %] — time limit in seconds.</li>
      <li>memoryLimit[% opt %] [% v17 %] — memory limit [% mem_units %].</li>
      <li>writeLimit[% opt %] [% v19 %] — write limit [% mem_units %]. By default is 999.</li>
    </ul>
  </td>
  <td>Description of the test generator. Generator must produce a file named according to the <code>outputFile</code> attribute. That file is used as an input data by the [% tag_ref('In') %] tag.
    By default the file name is equal to the value of <code>inputFile</code> attribute of the  [% tag_ref('Problem') %] tag.
    Special value of <code>outputFile="*STDOUT"</code> means that the generator should print the test to the standard output.
    <br/>
    For group generators outputFile attribute may contain context variables which are expanded to the test number [% v15 %],
    or file pattern characters [% v19 %] '?' and '*'.
    For example, to describe a generator producing test files t01, t02, ..., t50 in subdirectories subtask1, subtask2, ...:
    <pre>
      &lt;Generator name="gen" src="gen.pas" outputFile="subtask?/t%0n" /&gt;
      &lt;Test rank="1-50" &gt; &lt;In use="gen" genAll="1"&gt; ...</pre>
  </td>
</tr>
<tr>
  <td>[% tag_in('GeneratorRange', 'Problem', v12) %]</td>
  <td>
    <ul>
      <li>from — sequential number of the first generator.</li>
      <li>to — sequential number of the first generator.</li>
      <li>name — identifier of the [% tag_ref('Generator') %] object.</li>
      <li>src — path to the source code file.</li>
      <li>de_code[% opt %] — development environment code.</li>
      <li>outputFile[% opt %] [% v12 %] — input file name or "*STDOUT".</li>
      <li>export[% opt %] [% v14 %] — globally unique identifier.</li>
      <li>timeLimit[% opt %] [% v17 %] — time limit in seconds.</li>
      <li>memoryLimit[% opt %] [% v17 %] — memory limit [% mem_units %].</li>
      <li>writeLimit[% opt %] [% v19 %] — write limit [% mem_units %]. By default is 999.</li>
    </ul>
  </td>
  <td>Attributes name, src and export of [% tag_ref('GeneratorRange') %] tag may contain context variables which are expanded to the current generator number.
    For example:<br/>
    <code>&lt;GeneratorRange from="1" to="10" name="g%0n" src="gen%0n.pas"/&gt;</code>
  </td>
</tr>
<tr>
  <td>[% tag_in('Validator', 'Problem', v110) %]</td>
  <td>
    <ul>
      <li>name — identifier of the [% tag_ref('Validator') %] object.</li>
      <li>src — path to the source code file.</li>
      <li>de_code[% opt %] — development environment code.</li>
      <li>export[% opt %] — globally unique identifier.</li>
      <li>timeLimit[% opt %] — time limit in seconds.</li>
      <li>memoryLimit[% opt %] — memory limit [% mem_units %].</li>
      <li>writeLimit[% opt %] — write limit [% mem_units %]. By default is 999.</li>
    </ul>
  </td>
  <td>Test data validator. Reads data from standard input and/or input file.
    Exits with code 0 if the data is valid, 0 otherwise.
  </td>
</tr>
<tr>
  <td>[% tag_in('Visualizer', 'Problem', v19) %]</td>
  <td>
    <ul>
      <li>name — identifier of the [% tag_ref('Visualizer') %] object.</li>
      <li>src — path to the source code file.</li>
      <li>de_code[% opt %] — development environment code, it is recommended to use code 1.</li>
      <li>export[% opt %] — globally unique identifier.</li>
    </ul>
  </td>
  <td>Test data visualizer.</td>
</tr>
<tr>
  <td>[% tag_in('Interactor', 'Problem', v19) %]</td>
  <td>
    <ul>
      <li>name — identifier of the [% tag_ref('Interactor') %] object.</li>
      <li>src — path to the source code file.</li>
      <li>de_code[% opt %] — development environment code.</li>
      <li>export[% opt %] — globally unique identifier.</li>
      <li>timeLimit[% opt %] — time limit in seconds.</li>
      <li>memoryLimit[% opt %] — memory limit [% mem_units %].</li>
      <li>writeLimit[% opt %] — write limit [% mem_units %].</li>
    </ul>
  </td>
  <td>Interactor or controller (see [% tag_ref('Run') %]). Only one iterator per problem is allowed.</td>
</tr>
<tr>
  <td>[% tag_in('Linter', 'Problem', v110) %]</td>
  <td>
    <ul>
      <li>name — identifier of the [% tag_ref('Linter') %] object.</li>
      <li>src — path to the source code file.</li>
      <li>stage — either 'before' or 'after'.</li>
      <li>de_code[% opt %] — development environment code.</li>
      <li>export[% opt %] — globally unique identifier.</li>
      <li>timeLimit[% opt %] — time limit in seconds.</li>
      <li>memoryLimit[% opt %] — memory limit [% mem_units %].</li>
      <li>writeLimit[% opt %] — write limit [% mem_units %].</li>
    </ul>
  </td>
  <td>Linter runs either before or after compilation, depending on 'stage' attribute.
    Linter accepts source file names on command line and exits with non-zero code
    if the source does not pass the check.
    Standard output of linter may contain error message.
    Linter can be imported by its global identifier. See [% tag_ref('Import') %].</td>
</tr>
<tr>
  <td>[% tag_in('Run', 'Problem', v19) %]</td>
  <td>
    <ul>
      <li>method — solution running method.</li>
    </ul>
  </td>
  <td>Possible values of method attribute:
    <ul>
      <li>default — run a single process of solution.</li>
      <li>interactive — run solution and interactor (see [% tag_ref('Interactor') %]) simultaneously,
        exchanging data via standard input/output streams.</li>
      <li>competitive[% v110 %] — run controller (see [% tag_ref('Interactor') %]) and several solutions (agents) simultaneously,
        exchanging data via standard input/output streams.</li>
      <li>competitive_modules[% v111 %] — run controller and several solutions (agents) simultaneously,
        exchanging data via API inside of a single process.</li>
      <li>none[% v111 %] — run is not performed.</li>
    </ul>
  </td>
</tr>
<tr>
  <td>[% tag_in('Snippet', 'Problem', v111) %]</td>
  <td>
    <ul>
      <li>name — identifier of the [% tag_ref('Snippet') %] object, can use <a href="#contextVars">context variables</a>.</li>
      <li>rank[% opt %] [% v111 %] — <a href="#rankSpec">ranks specifier</a> of [% tag_ref('Snippet') %] objects.</li>
      <li>generator[% opt %] — identifier of the [% tag_ref('Generator') %] object.</li>
    </ul>
  </td>
  <td>Snippet of the problem statement or test. May be different for each participant.
  </td>
</tr>
<tr>
  <td>[% tag_in('Test', 'Problem') %]</td>
  <td><ul>
    <li>rank — <a href="#rankSpec">test ranks specifier</a>.
      If rank attribute is equal to "*", parameters given in the text are set as defaults for all tests. [% v16 %]</li>
    <li>points[% opt %] — number of points for the test.</li>
    <li>descr[% opt %] [% v110 %] — test description.</li>
  </ul></td>
  <td>
  Problem must have tests with ranks from 1 upto some N.
  If there is no tests, any compilable submission will be judged OK.
  Since version 1.5 attributes of [% tag_ref('In') %] and [% tag_ref('Out') %] tags,
  nested inside [% tag_ref('Test') %] tag,
  may contain context variables which are expanded to the current test number.
  For example:<pre>&lt;Test rank="1-10"&gt;
  &lt;In src="%0n.in"/&gt;&lt;Out use="solution"/&gt;
&lt;/Test&gt;</pre>
  To avoid duplication, test properties may be split between several tags, for example:
  <pre>&lt;Test rank="1-5" points="1" /&gt;
&lt;Test rank="6-10" points="2" /&gt;
&lt;Test rank="1-10"&gt;&lt;Out use="sol"&gt;&lt;/Test&gt;</pre>
  However the data about each test must not overlap between tags.
</td>
</tr>
<tr>
  <td>[% tag_in('TestRange', 'Problem', s(v11, dv15)) %]</td>
  <td>
    <ul>
      <li>from — sequential number of the first test.</li>
      <li>to — sequential number of the last test.</li>
       <li>points[% opt %] — number of points for each test in range.</li>
    </ul>
  </td>
  <td>
  Since version 1.5, this tag is deprecated — use [% tag_ref('Test') %] tag instead.<br/>
  Attributes of [% tag_ref('In') %] and [% tag_ref('Out') %] tags,
  nested inside [% tag_ref('TestRange') %] tag,
  may contain context variables which are expanded to the current test number.
  For example:<pre>&lt;TestRange from="1" to="10"&gt;
  &lt;In src="%0n.in"/&gt;&lt;Out use="solution"/&gt;
&lt;/TestRange&gt;</pre>
</td>
</tr>
<tr>
  <td>[% tag_in('In', 'Test') %], [% tag_ref('TestRange'); v11 %]</td>
  <td>
    <ul>
      <li>use[% opt %] — identifier of the [% tag_ref('Generator') %] object.</li>
      <li>param[% opt %] — command-line parameters passed to the generator.</li>
      <li>src[% opt %] — path to the input file (if the use attribute is omitted).</li>
      <li>genAll[% s(opt, v15) %] — generate a group of tests with a single generator.</li>
      <li>validate[% s(opt, v110) %] — identifier of the [% tag_ref('Validator') %] object.</li>
      <li>validateParam[% s(opt, v110) %] — command-line argument to pass to [% tag_ref('Validator') %].</li>
      <li>hash[% s(opt, v110) %] — input file hash in the format <code>$alg$hex</code>,
        where 'alg' is one of 'sha' or 'md5',
        and 'hex' is a sequence of lowcase hexadecimal digits representing hash value.</li>
      <li>snippet[% s(opt, v111) %] — identifier of the [% tag_ref('Snippet') %] object.</li>
    </ul>
  </td>
  <td>Test input description.
    <br/>
    If the "use" attribute is present, input file is produced by running the given test generator.
    If the "param" attribute contains "<code>|</code>" character, then generation is performed by a pipeline,
    starting with test generator, followed by generator modules. For example:
    <pre><code>&lt;Test rank="10"&gt;&lt;In use="gen" param="100 | shuffle 19234"/&gt;&lt;/Test&gt;</code></pre>
    If neither "src" nor "use" attribute is present, input text is nested inside the tag[% v19 %].
    Whitespace is preserved exactly.
  </td>
</tr>
<tr>
  <td>[% tag_in('Out', 'Test') %], [% tag_ref('TestRange'); v11 %]</td>
  <td>
    <ul>
      <li>use[% opt %] — identifier of the [% tag_ref('Solution') %] object.</li>
      <li>src[% opt %] — path to the output file (if the use attribute is omitted).</li>
    </ul>
  </td>
  <td>
    If the "use" attribute is present, output file is produced by running the given jury solution.
    If neither "src" nor "use" attribute is present, output text is nested inside the tag[% v19 %].
    Whitespace is preserved exactly.
  </td>
</tr>
<tr>
  <td>[% tag_in('Testset', 'Problem', v15) %]</td>
  <td><ul>
    <li>name — name of the test set.</li>
    <li>tests — <a href="#rankSpec">test rank specification</a>.</li>
    <li>points[% s(opt, v18) %] — number of points for the whole testset.</li>
    <li>hideDetails[% s(opt, v18) %] — hide results of individual tests.</li>
    <li>comment[% s(opt, v18) %] — comment.</li>
    <li>depends_on[% s(opt, v19) %] —
      <a href="#rankSpec">rank specification</a> for tests upon which this testset depends.</li>
  </ul></td>
  <td>Contains test set description. While adding the problem to the contest,
    one or more testsets to use for checking may be specified.
    By default all the available tests are used.
    If the number of points for the testset is specified, the points are awarded
    only if all tests have passed.
    It is allowed to mix testsets and stand-alone tests, as well as specify
    overlapping testsets.
    However, the test must not be included in a several concurrently used testsets
    with points, dependencies or hidden details.
  </td>
</tr>
<tr>
  <td>[% tag_in('Module', 'Problem', v12) %]</td>
  <td>
    <ul>
      <li>name — identifier of the [% tag_ref('Module') %] object.</li>
      <li>src — path to the source code file.</li>
      <li>fileName[% opt %] [% v111 %] — name of the source code file to be created.</li>
      <li>de_code[% opt %] — development environment code.</li>
      <li>type — module type (generator, checker, solution, linter).</li>
      <li>export[% opt %] [% v14 %] — globally unique identifier.</li>
      <li>main[% opt %] [% v110 %] — use this module as main file, and submitted code as a module with given name.
        For modules of type 'solution' only.</li>
    </ul>
  </td>
  <td>Module description. Module files are unpacked and compiled together with every object of the corresponding type.
    For the modules which do not require compilation, use development environment "None" (de_code="1").
    Modules are compiled in the order they are listed in the package.
    If fileName attribute is given instead of src attribute, tag content will be saved to a module named fileName.
  </td>
</tr>
<tr>
  <td>[% tag_in('Import', 'Problem', v14) %]</td>
  <td>
    <ul>
      <li>guid — globally unique identifier of the imported object.
        Can contain <code>*</code> character, designating an arbitrary substring.[% v15 %]</li>
      <li>type[% opt %] — type of the imported object (generator, checker, solution).</li>
      <li>name[% opt %] [% v15 %] — problem-local identifier of the imported object.</li>
    </ul>
  </td>
  <td>Import an object from the existing problem. Object is searched by guid.
    Is the type attribute is present, the type of referenced object is checked against it.
    The effect of importing an object is equivalent to adding that object to a package.
  </td>
</tr>
<tr>
  <td>[% tag_in('Sample', 'Problem') %]</td>
  <td>
    <ul>
      <li>rank — sample rank specifier (independent of similar attribute of [% tag_ref('Test') %] tag).</li>
    </ul>
  </td>
  <td>Sample test descrption.
  Attributes of tags [% tag_ref('SampleIn') %] and [% tag_ref('SampleOut') %] nested inside of [% tag_ref('Sample') %]
  can contain context variable referencing sample rank[% v19 %].
  For example:
  <pre>&lt;Sample rank="1-3"&gt;
  &lt;SampleIn src="%0n.in"/&gt;
  &lt;SampleOut src="%0n.out"/&gt;
&lt;/Sample&gt;</pre>
  </td>
</tr>
<tr>
  <td>[% tag_in('SampleIn', 'Sample') %]</td>
  <td>
    <ul>
      <li>src[% opt %] [% v16 %] — path to the sample input file.</li>
      <li>html[% opt %] [% v111 %] — flag to apply formatting inside sample text. If not set, special characters in the text are reproduced literally.</li>
    </ul>
  </td>
  <td>
    If the src attribute is omitted, sample input text is nested inside the tag.
    Whitespace is preserved exactly.
  </td>
</tr>
<tr>
  <td>[% tag_in('SampleOut', 'Sample') %]</td>
  <td>
    <ul>
      <li>src[% opt %] [% v16 %] — path to the sample input file.</li>
      <li>html[% opt %] [% v111 %] — flag to apply formatting inside sample text. If not set, special characters in the text are reproduced literally.</li>
    </ul>
  </td>
  <td>
    If the src attribute is omitted, sample output text is nested inside the tag.
    Whitespace is preserved exactly.
  </td>
</tr>
<tr>
  <td>[% tag_in('Quiz', 'ProblemStatement', v111) %]</td>
  <td>
    <ul>
      <li>type — question type, possible types are: <code>text</code>, <code>radiogroup</code>, <code>checkbox</code>.</li>
      <li>rank[% opt %] — test rank (see [% tag_ref('Test') %]), by default the serial number of the tag is used.</li>
      <li>points[% opt %] — number of points for the test.</li>
      <li>descr[% opt %] — test description.</li>
    </ul>
  </td>
  <td>Question from the quiz. If at least one of the attributes <code>rank</code>, <code>points</code>, <code>descr</code> is given,
    or either tag [% tag_ref('Answer') %] or tag [% tag_ref('Choice') %]
    with the <code>correct</code> attribute is used, test will be created automatically.
  </td>
</tr>
<tr>
  <td>[% tag_in('Text', 'Quiz', v111) %]</td>
  <td></td>
  <td>Question text.</td>
</tr>
<tr>
  <td>[% tag_in('Answer', 'Quiz', v111) %]</td>
  <td></td>
  <td>Correct answer for the question of type <code>text</code>.
  </td>
</tr>
<tr>
  <td>[% tag_in('Choice', 'Quiz', v111) %]</td>
  <td>
    <ul>
      <li>correct[% opt %] — if the attribute is equal to 1, the variant is accepted as correct.</li>
    </ul>
  </td>
  <td>Answer variant for the question of type <code>radiogroup</code> or <code>checkbox</code>.
  </td>
</tr>
</table>

<a name="rankSpec"></a>
<h2>Ranks specification</h2>
<p>
  Specifier is a comma-separated list of elements.
  Each element may be one of:
</p>
<ul>
  <li>Integer number,</li>
  <li>Range of numbers, separated by "<code>-</code>" character [% v15 %],</li>
  <li>Range of numbers and step, separated by "<code>-</code>" character [% v110 %],</li>
  <li>For test case rank specifications — testset name ([% tag_ref('Testset') %])[% v18 %].</li>
</ul>

<a name="contextVars"></a>
<h2>Context variables</h2>

<p>Have a form of <code>%n</code>, <code>%0n</code>, meaning test number and zero-padded test number correspondingly.</p>

<a name="STML"></a>
<h2>STML (Simple Text Markup Language)</h2>

<p>STML is a radically simplified subset of HTML with a few additional tags. The following tags are defined in STML:</p>

<table class="ft">
<tr><th>Tag name<br/>Parent tag</th><th>Attributes</th><th>Comments</th></tr>
<tr><td>[% tag_in('img') %]</td>
  <td>
    <ul>
      <li>picture — identifier of the [% tag_ref('Picture') %] object.</li>
      <li>width[% opt %] — image width (in pixels).</li>
      <li>height[% opt %] — image height (in pixels).</li>
      <li>align[% opt %] — image alignment<br/>
        (May have value of left or right).</li>
    </ul>
  </td>
  <td>Embed an image.</td>
</tr>
<tr><td>[% tag_in('a'); v16 %]</td>
  <td>
    <ul>
      <li>attachment — identifier of the [% tag_ref('Attachment') %] object.</li>
    </ul>
  </td>
  <td>Insert a link to the attached file.</td>
</tr>
<tr><td>[% tag_in('object'); v16 %]</td>
  <td>
    <ul>
      <li>attachment — identifier of the [% tag_ref('Attachment') %] object.</li>
    </ul>
  </td>
  <td>Insert a link to the attached file.</td>
</tr>
<tr><td>[% tag_in('include'); v17 %]</td>
  <td>
    <ul>
      <li>src — name of the file to be included; the file must have the same encoding as the XML.</li>
    </ul>
  </td>
  <td>Insert a text from the file.</td>
</tr>
<tr><td>[% tag_in('code') %]</td>
  <td>
    <ul>
      <li>language[% v110 %] — programming language name for syntax highlighting.</li>
    </ul>
  </td>
  <td>Format text as code.</td>
</tr>
<tr><td>[% tag_in('i') %], [% tag_in('em') %]</td>
  <td>&nbsp;</td>
  <td>Italics.</td>
</tr>
<tr><td>[% tag_in('b') %]</td>
  <td>&nbsp;</td>
  <td>Bold.</td>
</tr>
<tr><td>[% tag_in('p') %]</td>
  <td>&nbsp;</td>
  <td>Paragraph</td>
</tr>
<tr><td>[% tag_in('table') %]</td>
  <td>
    <ul>
      <li>border[% opt %] — 1 — draw border,<br/>
        0 — do not draw border (default).</li>
      <li>width[% opt %] — table width.</li>
    </ul>
  </td>
  <td>HTML Table.</td>
</tr>
<tr><td>[% tag_in('tr', 'table') %]</td>
  <td>&nbsp;</td>
  <td>Table row</td>
</tr>
<tr><td>[% tag_in('td', 'tr') %]</td>
  <td>&nbsp;</td>
  <td>Table cell</td>
</tr>
<tr><td>[% tag_in('th', 'tr') %]</td>
  <td>&nbsp;</td>
  <td>Table header</td>
</tr>
</table>

<a name="cats-if"></a>
<h2>STML conditionals</h2>
<p>Any tag inside [% stml %] can have additional <code>cats-if</code> attribute.
Its value is a condition on problem tags.
</p>
<p>Condition is a list of expressions separated by comma.
Each expression is one of
<code>name</code>,
<code>!name</code>,
<code>name=value</code> or
<code>!name=value</code>, where <code>!</code> sign denotes
logical not, name — tag name, value — tag value.
</p>

<a name="attr-lang"></a>
<h2><code>lang</code> attribute [% v110 %]</h2>
<p>By default, problem text is enclosed in a <code>div</code> tag with <code>lang</code> attribute
corresponding to the chosen language tag. However, if the text uses several languages
simultaneously (e.g. English terms in Russian text), spans of non-default language should
have explicit <code>lang</code> attribute.
</p>

<a name="cats-dict"></a>
<h2><code>cats-dict</code> attribute [% v110 %]</h2>
<p>Words inside of tag with <code>cats-dict="1"</code> attribute are added to the dictionary of the current language.</p>

<a name="cats-snippet"></a>
<h2><code>cats-snippet</code> attribute [% v111 %]</h2>
<p>Contents of the tag with <code>cats-snippet="<i>snippet_name</i>"</code> attribute are replaced by the snippet <i>snippet_name</i>.</p>

<a name="memoryUnits"></a>
<h2>Memory units [% v19 %]</h2>
<p>
  Memory size in mlimit, memoryLimit, wlimit or writeLimit
  attribute value must be an integer optionally followed
  by a suffix 'B' for bytes, 'K' for kilobytes, 'M' for megabytes, 'G' for gigabytes.
  If no suffix is given, megabytes are assumed.
</p>

<a name="opt"></a><p><a href="" onclick="javascript:history.back(-1)"><sup>o</sup></a>
  Attributes market with this sign are optional.</p>
[%- MACRO since(n, v) BLOCK -%]
<a name="[% n %]"></a><p><a href="" onclick="javascript:history.back(-1)"><sup>[% v %]</sup></a>
  This feature is available since [% v %].</p>
[%- END -%]
[%
  since('v11', '1.1'); since('v12', '1.2');
  since('v13', '1.3'); since('v14', '1.4');
  since('v15', '1.5'); since('v16', '1.6');
  since('v17', '1.7'); since('v18', '1.8');
  since('v19', '1.9'); since('v110', '1.10');
  since('v111', '1.11');
%]
<a name="dv14"></a><p><a href="" onclick="javascript:history.back(-1)"><sup>&minus;1.4</sup></a>
  This feature is deprecated since version 1.4.</p>
<a name="dv15"></a><p><a href="" onclick="javascript:history.back(-1)"><sup>&minus;1.5</sup></a>
  This feature is deprecated since version 1.5.</p>

[% PROCESS footer.tti %]
