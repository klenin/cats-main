[%- js.nonce = 1; js.jquery = 1; js.ace = 1; js.csp_sources = ' ' _ web.get_host _ '/cats/static/js/';
  js.mathjax = mathjax; js.mathjax_onload = 1 -%]
[%- js.quizzes = 1 IF has_quizzes || has_snippets -%]
[% js.ace_static_highlight = has_static_highlight %]
[%- PROCESS includes/header.tti -%]
[%- PROCESS includes/html.tti -%]
[%- PROCESS "lang/$lang/problems.html.tt" -%]
[%- PROCESS "lang/$lang/editor_menu.tti" -%]
[% tex_styles %]
[%- text_width = 1000; list_padding = 30; -%]
<style>
  @media print { div.problem_menu.jsonly, a.problem_menu_trigger.jsonly { display: none; } }

  div.problem_menu { display: none; width: 100%; background-color: #eeeeee; }
  div.problem_menu ul { list-style-type: none; padding: 0; }
  div.problem_menu ul li { display: inline-block; padding: 3px 10px; border-right: 1px solid; }
  div.problem_menu ul li a.problem_list_link { display: inline-block; padding-top: 2px; }
  div.problem_menu input[type=checkbox] { display: none; }
  div.problem_menu input[type=checkbox] + span:after { content: '\2610'; }
  div.problem_menu input[type=checkbox]:checked + span:after { content: '\2611'; }
  div.problem_menu ul li.last_verdict { padding-top: 2px; padding-bottom: 2px; vertical-align: bottom; }
  div.problem_menu ul li.last_verdict span { display: inline-block; vertical-align: bottom; }
  div.problem_menu li.langs { font-weight: bold; }
  div.problem_menu li.langs a { font-weight: normal; }

  div.problem_text table.problem_header { width: 100%; }
  div.problem_text p, div.problem_text ul, div.problem_text ol {
    hyphens: auto; text-align: justify;
  }
  div.problem_text p { max-width: [% text_width %]px; }
  div.problem_text ul, div.problem_text ol {
    max-width: [% text_width - list_padding %]px; padding-left: [% list_padding %]px;
  }
  div.problem_text .problem_menu ul { padding-left: 0; }
  div.problem_text > table { max-width: [% text_width %]px; }
  div.problem_text p span { text-indent: 0; }
  div.problem_text table.thin_border { border-collapse: collapse; border: 1px; }
  div.problem_text table.thin_border td, div.problem_text table.thin_border th { border: 1px solid black; padding: 2px; }
  div.problem_text .ace_static_highlight { font-size: inherit; }
  [%- PROCESS includes/verdicts.css.tti class='last_verdict' IF href_get_last_verdicts -%]
  .cond_true { color: #008000; }
  .cond_false { color: #800000; }
  .missing { border: 1px solid black; padding: 1px 5px; background: #ffe0e0; }
  .submit_messages { margin: 15px 0; }
  .submit_form { margin-top: 15px; }
  .submit_input { margin-right: 5px; }
  .n_item .current { border: 1px solid #4040ff; box-sizing: border-box; }
  .nav_container { position: fixed; top: 0; right: 0; overflow: auto; max-height: 100vh; }
  #until_finish { position: fixed; right: 0; background-color: white; }
  .n_item { border: 1px solid #4040ff; border-top: none; }
  .n_item:first-of-type { border-top: 1px solid #4040ff; }
  .n_button { width: 35px; height: 18px;  text-align: center; text-decoration: none; display: inline-block; cursor: pointer; }
  Quiz Choice { display: block; }
  Quiz Choice:before { font-size: larger; margin-right: 0.5em; }
  Quiz[type=checkbox] Choice:before { content: '\2610';}
  Quiz[type=radiogroup] Choice:before { content: '\25EF';}
  Quiz[type=text]:not(.active) { display: block; width: 50em; height: 4ex; border: 1px solid black; }
  Quiz[type=matching] div.match_root { display: flex; flex-direction: row; position: relative; }
  Quiz[type=matching] div.match_side { padding: 5px; margin: 10px 0; text-align: center; max-width: 240px; }
  Quiz[type=matching] div.match_side:hover { box-shadow: 3px 3px 3px gray; }
  Quiz[type=matching] div.match_side.match_selected { background: #E0E0FF; }
  Quiz[type=matching] svg.match_drawing_space { width: 150px; }
  Quiz[type=matching] svg.match_drawing_space path { stroke: blue; }
  Quiz[type=matching] svg.match_drawing_space path:hover { stroke: red; cursor: not-allowed; }
  @media only screen and (max-device-width: 736px) { .nav_container { display: none; } }
</style>
</head>
<body>
[% FOREACH p IN problems; il = p.iface_lang; PROCESS "lang/$il/problem_text_p.html.tt" UNLESS capt.problem_text.item(il); END; %]
[%- PROCESS includes/icon/copy.tti -%]
[% FOREACH p IN problems; c = capt.problem_text.item(p.iface_lang) %]
<div class="problem_text" id="p[% p.cpid %]" [% UNLESS loop.first %]style="page-break-before: always;"[% END %] lang="[% p.lang %]">
  <a name="pr[% p.code || p.cpid || p.id %]"></a>

  <h2>
  [% IF p.color %]<span class="problem_color" style="background-color: [% p.color | html %];"></span>[% END %]
  [% "${c.problem} " IF !p.nosubmit; "${p.code}. " IF p.code; p.title | html %]
  <a class="jsonly problem_menu_trigger problem_menu_click">&#x2261;</a>
  </h2>
  <div class="jsonly problem_menu"><ul>
    <li><a class="problem_list_link" href="[% p.href_problem_list %]">[% c.problem_list %]</a></li>
    <li class="problem_details_link" style="display: none"><a href="#" class="icon edit" title="[% c.problem_details %]"></a></li>
    <li><label><input type="checkbox" class="whitespace"><span></span> [% c.visible_spaces %]</label></li>
    <li><label><input type="checkbox" class="basic_math"><span></span> [% c.basic_math %]</label></li>
    <li><label><input type="checkbox" class="wide_text"><span></span> [% c.wide_text %]</label></li>
    <li><label><input type="checkbox" class="show_editor" checked="true"><span></span> [% c.show_editor %]</label></li>
    <li class="last_verdict" style="display: none"><span class="verdict">
      <table><tr><td><a href="#"></a></td><td><div></div></td></tr></table>
    </span></li>
    [% IF problems.size == 1 && p.langs && p.langs.size > 1 -%]
    <li class="langs">[% FOREACH lang IN p.langs; maybe_href(lang == p.lang ? '' : '#', lang); ' '; END %]</li>
    [%- END %]
  </ul></div>
  <table class="problem_header">
  [%-
    left_col = [
      { n => p.author ? c.author : '', t => p.author },
      { n => p.input_file == '*NONE' ? '' : p.interactive_io ? c.input_output : c.input_file,
        t => p.interactive_io ? c.interactive : p.input_file == '*STDIN' ? c.standard_input : p.input_file },
      { n => p.output_file == '*NONE' || p.interactive_io ? '' : c.output_file,
        t => p.interactive_io ? '' : p.output_file == '*STDOUT' ? c.standard_output : p.output_file },
      { n => p.show_points && p.max_points ? c.max_points : '',
        t => p.max_points },
    ];
    lc_nonempty = 0; FOREACH lc IN left_col; SET lc_nonempty = 1 IF lc.n; END;
    right_col => [
      { n => !p.parsed_tags.hide_time_limit && !p.nosubmit && p.time_limit > 0 ? c.time_limit : '',
        t => "${p.time_limit} ${c.seconds}" },
      { n => !p.parsed_tags.hide_memory_limit && !p.nosubmit && p.time_limit > 0 ? c.memory_limit : '', # memory_limit defaults to 200 in legacy problems.
        t => "${p.memory_limit} ${c.megabytes}" },
      { n => !p.parsed_tags.hide_write_limit && !p.nosubmit && p.write_limit ? c.write_limit : ''
        t => "${p.write_limit} ${c.bytes}" },
    ];
  -%]
  [% li = 0; ri = 0;
    WHILE 1;
      WHILE li < left_col.size && !left_col.item(li).n; li = li + 1; END;
      WHILE ri < right_col.size && !right_col.item(ri).n; ri = ri + 1; END;
      LAST IF li >= left_col.size && ri >= right_col.size;
      lc = left_col.item(li); rc = right_col.item(ri);
  %]
  <tr>
    [% IF lc_nonempty -%]
    <td class="narrow nobr">[% lc.n; lc.n ? ':' : '' %]</td><td>[% lc.n ? lc.t : '' | html %]</td>
    <td>&nbsp;</td>
    [%- END %]
    <td class="narrow nobr">[% rc.n; rc.n ? ':' : '' %]</td><td>[% rc.n ? rc.t : '' | html %]</td>
  </tr>
  [% li = li + 1; ri = ri + 1; END %]
  [% IF p.keywords -%]
  <tr><td class="narrow nobr">[% c.keywords %]:</td><td colspan="[% lc_nonempty ? 4 : 2 %]">[% p.keywords %]</td></tr>
  [%- END %]
  </table>

  [%- MACRO section(name, caption) IF p.item(name).trim() %]
    <h3>[% c.item(caption || name) %]</h3>
    [% p.item(name) %]
  [% END -%]

  [% IF p.nosubmit; p.statement; ELSE; section('statement'); END %]
  [% section('input_format', p.input_file == '*STDIN' || p.input_file == '*NONE' ? 0 : 'input_file_format') %]
  [% IF p.formal_input %]
    <h3>[% c.formal_input %]</h3>
    <pre>[% p.formal_input %]</pre>
  [% END %]
  [% section('output_format', p.output_file == '*STDOUT' || p.output_file == '*NONE' ? 0 : 'output_file_format') %]
  [% section('pconstraints') %]
  [% IF p.samples.size %]
    <h3>[% c.sample_tests %]</h3>
    <table class="sample" id="sample[% p.cpid %]">
    <tr><th>[% c.sample_number %]</th>
    <th>[% IF p.input_file == '*STDIN' || p.input_file == '*NONE'; c.standard_input;
      ELSE; c.input_file %] (<code>[% p.input_file | html %]</code>)[% END %]</th>
    <th>[% IF p.output_file == '*STDOUT' || p.output_file == '*NONE'; c.standard_output;
      ELSE; c.output_file %] (<code>[% p.output_file | html %]</code>)[% END %]</th></tr>
    [% FOREACH s IN p.samples %]
    <tr>
      <td>[% s.rank %]</td>
      <td>
        [%- IF s.in_html; s.in_file; ELSE -%]
        <pre><code>[% s.in_file | html %]</code></pre>
        [%- END -%]
        <button type="button" class="button copy_button" title="[% c.copy %]">[% svg_icon('copy') %]</button>
      </td>
      <td>
        [%- IF s.out_html; s.out_file; ELSE -%]
        <pre><code>[% s.out_file | html %]</code></pre>
        [%- END -%]
        <button type='button' class="button copy_button" title="[% c.copy %]">[% svg_icon('copy') %]</button>
      </td>
    </tr>
    [% END %]
    </table>
  [% END %]
  [% section('explanation') %]
  [% FOR sol IN p.solutions %]
  <h4>[% sol.fname | html %]</h4>
  <pre class="bordered" style="max-width: 90%;"><code language="[% sol.syntax | html %]">[% sol.src | html %]</code></pre>
  [% END %]

  <div class="submit"></div>
  <hr>
</div>
[% END %]
<div class="nav_container hidden">
  [% FOREACH p IN problems %]
  <div class="n_item" id="p[% p.cpid %]_verdict"><a href="#p[% p.cpid %]" class="n_button" title="[% p.title | html %]">[% p.code %]</a></div>
  [% END %]
  <div id="until_finish" title="[% capt.until_finish %]"></div>
</div>
<script nonce="[% nonce %]">
$('.problem_menu_click').click(function() { $(this).parent().next().toggle(); $(this).toggleClass('problem_menu_hovered'); });

var query_params = (function() {
  var url = window.location.search;
  var qs = url.substring(url.indexOf('?') + 1).split(';');
  for(var i = 0, result = {}; i < qs.length; i++) {
    qs[i] = qs[i].split('=');
    result[qs[i][0]] = decodeURIComponent(qs[i][1]);
  }
  return result;
})();
var sid = query_params.sid;
var uid = query_params.uid;
var has_submit = !query_params.nosubmit;
var rid = query_params.rid;

function add_param(href, name, value) {
  return href + (href.indexOf('?') >= 0 ? ';' : '?') + name + '=' + value;
}

if (sid) {
  $('.problem_list_link').each(function() { this.href = add_param(this.href, 'sid', sid); });
}

function toggle_whitespace() {
  var p = $(this).parents('.problem_text');
  var ws = this.checked;
  p.find('.sample code').each(function() {
    var t = $(this).text();
    if (ws)
      t = t.replace(/ /g, '\u2423');
    else
      t = t.replace(/\u2423/g, ' ');
    $(this).text(t);
  });
}
$('.problem_text div.problem_menu input.whitespace').click(toggle_whitespace).each(toggle_whitespace);

$('.basic_math').click(function() {
  var p = $(this).parents('.problem_text');
  if (this.checked)
    p.find('span.TeX').each(unset_tex);
  else
    apply_mathjax(p);
});

function toggle_wide_text() {
  var p = $(this).parents('.problem_text');
  p.children('p').css({ 'max-width': this.checked ? 'none' : '[% text_width %]' });
  p.children('ul, ol').css({ 'max-width': this.checked ? 'none' : '[% text_width - list_padding %]' });
}
$('.wide_text').click(toggle_wide_text).each(toggle_wide_text);

$('.show_editor').click(function() {
  Editor.toggle_editor_visibility($(this).parents('.problem_text'));
});

$('.problem_text div.problem_menu li.langs a').click(function() {
  var p = document.location.pathname;
  if (p.substring(p.length - 5) === '.html') {
    [%# Static page. %]
    var n = '-pl-' + this.innerText;
    document.location.pathname =
      p.indexOf('-pl-') < 0 ? p.replace('.html', n + '.html') : p.replace(/-pl-[a-z]+/, n);
  }
  else {
    var s = document.location.search;
    document.location.search =
      s.indexOf('pl=') < 0 ? add_param(s, 'pl', this.innerText) : s.replace(/pl=[a-z]+/, 'pl=' + this.innerText);
  }
});

function copy_button_text(btn) { return btn.parents('td').find('code').text(); }
function copy_button_click() { navigator.clipboard.writeText(copy_button_text($(this))); }
$(function() {
  $('.copy_button').click(copy_button_click).each(function(i, btn) {
    var b = $(btn);
    if (copy_button_text(b).trim() === '') b.hide();
  });
});

var until_finish_sec = 0, until_finish_ts_sec = 0;

function fmt_dd(d) { return d < 10 ? '0' + d : '' + d; };

function until_finish_timer() {
  var t = until_finish_sec + until_finish_ts_sec - Date.now() / 1000;

  var sign = t < 0 ? '−' : '';
  t =  Math.floor(Math.abs(t) / 60);
  var minutes = t % 60;
  t = Math.floor(t / 60);
  var hours = t % 24;
  t = Math.floor(t / 24);
  var fmt = sign + (t ? t + '[% capt_days %] ' + fmt_dd(hours) : hours) + ':' + fmt_dd(minutes);
  $('#until_finish').text(fmt);
};

var enable_navigation = function() {
  if (query_params.nonav) return;
  $('.nav_container').removeClass('hidden');
  $('.n_item a').first().addClass('current');
  var $root = $('html, body');
  $(document).on('click', 'a[href^="#p"]', function () {
    $root.animate({ scrollTop: $($.attr(this, 'href')).offset().top - 10 }, 400);
    return false;
  });
  var nav_links = $('.n_item a');
  $(document).on('scroll', function() {
    var from_top = window.scrollY;
    $(nav_links).each(function() {
      var link = $(this);
      var problem_text = $(link[0].hash)[0];
      var eps = 15;
      problem_text.offsetTop - eps <= from_top && problem_text.offsetTop + problem_text.offsetHeight > from_top ?
        link.addClass('current') : link.removeClass('current');
    })
  });
};
$(document).ready(enable_navigation);

[% IF has_static_highlight -%]
function do_nothing(x) {}
var ace_static_highlight;
function static_highlight() {
  if (!ace_static_highlight)
    ace_static_highlight = ace.require('ace/ext/static_highlight');
  $('code[language]').each(function() {
    var el = this;
    if ($(el).find('.ace_static_highlight').length) return;
    ace_static_highlight(el, {
      mode: 'ace/mode/' + el.getAttribute('language'),
      theme: 'ace/theme/' + Editor.theme,
      showGutter: false,
      fontSize: "14pt",
    }, do_nothing);
  });
}
$(document).ready(static_highlight);
[% END %]

[%- IF href_get_last_verdicts -%]
var has_quizzes = [% has_quizzes ? 'true' : 'false' %];
[%- IF !has_snippets -%] $(document).ready(get_last_verdicts); [%- END -%]

function get_last_verdicts() {
  if (!sid) return;
  $.get('[% href_get_last_verdicts %];sid=' + sid).done(function(result) {
    if (!result) return;
    until_finish_sec = result.time_until_finish_sec;
    until_finish_ts_sec = Date.now() / 1000;
    for (var cpid in result) {
      if (!result[cpid]) continue;
      var r = result[cpid];
      if (r.verdict) {
        var v = $('#p' + cpid + ' .last_verdict > .verdict');
        v.addClass('run_details_' + r.verdict);
        v.find('a').attr('href', '[% href_static_path %]' + r.href_run_details).text(r.verdict);
        v.find('div').html(r.failed_test || '.&nbsp;');
        v.parent().show();
        $('#p' + cpid + '_verdict').addClass('run_details_' + r.verdict);
      }
      if (r.href_problem_details) {
        var pd = $('#p' + cpid + ' .problem_details_link');
        pd.find('a').attr('href', '[% href_static_path %]' + r.href_problem_details);
        pd.show();
      }
    }
    if (result.can_submit && has_submit) gen_forms(result);
  });
}

function gen_forms(problems) {
  var gen_form = function(select_id, editor_id, problem_id, cpid) {
    if (!problems[cpid].allowed) return;
    var container = $('#p' + cpid).find('.submit');
    if (container.find('form').length) return;
    var form = $('<form>').attr({ enctype: 'multipart/form-data', class: 'submit_form hidden' });

    var select = $('<select>').attr({ name: 'de_id', id: select_id, class: 'toolbar_item editor_only' });
    var add_option = function(de_id, de_syntax, de_name) {
      select.append($('<option>').attr({ value: de_id, 'editor-syntax': de_syntax }).text(de_name));
    }
    [% FOREACH de IN de_list %] add_option('[% de.de_id %]', '[% de.syntax %]', '[% de.de_name %]'); [% END %]
    select.appendTo(form);

    $('<input>').attr({ type: 'file', name: 'source', size: '25', class: 'file toolbar_item editor_only' }).appendTo(form);
    $('<button>').
      attr({ type: 'submit', name: 'submit', class: 'button toolbar_item' }).
      text('[% capt.submit %]').appendTo(form);
    var sources_info_btn = $('<button>').attr({ type: 'button', class: 'button toolbar_item' })
      .text('[% capt.last_submit %]')
      .click(get_sources_info_api).appendTo(form);

    var menu_trigger = $('<a>').attr({ class: 'problem_menu_trigger toolbar_item' }).
      html('&#x2261').click(function() { $(this).toggleClass('problem_menu_hovered'); }).appendTo(form);
    var editor_menu = $('<div>').attr('class', 'editor_menu').appendTo(menu_trigger);
    var add_btn = function(capt, onclick) {
      $('<button>').attr({ class: 'button', type: 'button' }).text(capt).click(onclick).appendTo(editor_menu);
    };
    add_btn('[% capt.reset %]', function() { Editor.reset_localstorage(editor_id) });
    add_btn('[% capt.invisible_chars %]', function() { Editor.toggle_invisible_chars(editor_id) });
    add_btn('[% capt.auto_wrap %]', function() { Editor.toggle_auto_wrap(editor_id) });
    $('<br><br>').appendTo(form);

    $('<textarea>').attr({
      name: 'source_text', cols: 100, rows: 15,
      'data-editor': 'text', 'data-gutter': '1', 'data-id': editor_id, 'data-init-defer': '1'
    }).appendTo(form);
    $('<input>').attr({ type: 'hidden', name: 'problem_id', value: problem_id }).appendTo(form);

    $('<div>').attr({ 'class' : 'submit_messages'}).appendTo(container);
    form.on('submit', process_submit);
    form.appendTo(container);
    form.removeClass('hidden');
    if (Editor.init_editor(editor_id))
      Editor.set_syntax(editor_id, select_id);
    // Load to editor source code of requested submission.
    if (rid) sources_info_btn.click();
  }
  [% FOREACH p IN problems %] gen_form('de[% p.id %]', 'ed_pt[% p.cpid %]', '[% p.id %]', '[% p.cpid %]'); [% END %]
  until_finish_timer();
  setInterval(until_finish_timer, 5000);
  if (has_quizzes) init_quizzes();
}

function process_submit(e) {
  e.preventDefault();
  var form = $(this);
  if (has_quizzes && !is_all_quiz_input_valid(form, '[% capt.problem_text.item(lang).spaces_in_answer %]'))
    return;
  var request_url = '[% href_submit_problem %]';
  if (!sid) return;
  request_url = add_param(request_url, 'sid', sid);

  var form_params = form.serializeArray();
  var form_data = new FormData();
  var file_tag = form.find('input[type="file"]')[0];
  form_data.append(file_tag.name, file_tag.files[0]);

  for (var i = 0; i < form_params.length; i++) {
    if (has_quizzes && form_params[i].name === 'de_id') {
      form_params[i].value = '[% quiz_de.de_id %]';
    }
    if (form_params[i].name === 'source_text') {
      var editor = Editor.get_editor(form);
      if (editor)
        form_params[i].value = editor.getSession().getValue();
    }
    form_data.append(form_params[i].name, form_params[i].value);
  }

  var xhr = new XMLHttpRequest();
  if (!xhr) {
    return false;
  }
  xhr.onreadystatechange = function() {
    if (xhr.readyState === XMLHttpRequest.DONE) {
      if (xhr.status == 200) {
        fill_messages(xhr.response, form);
      }
      // TODO
    }
  };
  xhr.open('POST', request_url);
  xhr.send(form_data);
};

function fill_messages(response, form) {
  var message_container = form.parent().find('.submit_messages');
  response = JSON.parse(response);
  message_container.empty();
  var append_to_container = function(message, classes) {
    message_container.append($('<div>', { class: classes } ).text(message));
  }
  if (response.de_name) {
    append_to_container('[% capt.dev_env_detected %]' + ': ' + response.de_name);
  }
  if (response.de_not_allowed) {
    var not_allowed = response.de_not_allowed;
    append_to_container('[% capt.de_not_allowed %]');
    var de_list = $('<ul>');
    for (var i = 0; i < not_allowed.length; i++) {
      de_list.append('<li>' + not_allowed[i].description + '</li>');
    }
    message_container.append(de_list);
  }
  var messages = response.messages;
  for (var i = 0; i < messages.length; i++) {
    append_to_container(messages[i], 'messages');
  }
  if (response.href_run_details) {
    var href_run_details = $("<a/>", {
      href: '[% href_static_path %]' + response.href_run_details,
      text: '[% capt.view_results %]',
    });
    message_container.append(href_run_details);
  }
}

function get_sources_info_api(rid_param) {
  if (!sid) return;
  var form = $(this).parent();
  var editor = Editor.get_editor(form);
  if (!ace || !editor) return;
  var request_url = add_param('[% href_get_sources_info %]', 'sid', sid);
  if (uid) request_url += ';uid=' + uid;
  if (rid_param) request_url += ';rid=' + rid_param;
  $.ajax({
    url: request_url,
    data: { problem_id: form.find('input[name=problem_id]').val() },
    success: function(response) {
      if (response.src) {
        editor.session.doc.setValue(response.src);
        editor.focus();
      }
      if (response.de_id)
        form.find('select[name=de_id]').val(response.de_id).change();
      if (has_quizzes)
        fill_quiz_forms(editor, form.parents('.problem_text'));
    }
  });
}
[%- END -%]

[% IF has_snippets %]
[%# Assigning to innerHTML forcibly comments out CDATA sections. https://stackoverflow.com/a/7068088 %]
function htmlWithCDATASectionsToHtmlWithout(html) {
  var ATTRS = '(?:[^>\"\']|\"[^\"]*\"|\'[^\']*\')*',
    [%# names of tags with RCDATA or CDATA content. %]
    SCRIPT = '[sS][cC][rR][iI][pP][tT]',
    STYLE = '[sS][tT][yY][lL][eE]',
    TEXTAREA = '[tT][eE][xX][tT][aA][rR][eE][aA]',
    TITLE = '[tT][iI][tT][lL][eE]',
    XMP = '[xX][mM][pP]',
    SPECIAL_TAG_NAME = [SCRIPT, STYLE, TEXTAREA, TITLE, XMP].join('|'),
    ANY = '[\\s\\S]*?',
    AMP = /&/g,
    LT = /</g,
    GT = />/g;
  return html.replace(new RegExp(
    [%# Entities and text. %]
    '^<]+' +
    [%# Comment. %]
    '|<!--' + ANY + '-->' +
    [%# Regular tag. %]
    '|<\/?(?!' + SPECIAL_TAG_NAME + ')[a-zA-Z]' + ATTRS + '>' +
    [%# Special tags. %]
    '|<\/?' + SCRIPT   + '\\b' + ATTRS + '>' + ANY + '<\/' + SCRIPT   + '\\s*>' +
    '|<\/?' + STYLE    + '\\b' + ATTRS + '>' + ANY + '<\/' + STYLE    + '\\s*>' +
    '|<\/?' + TEXTAREA + '\\b' + ATTRS + '>' + ANY + '<\/' + TEXTAREA + '\\s*>' +
    '|<\/?' + TITLE    + '\\b' + ATTRS + '>' + ANY + '<\/' + TITLE    + '\\s*>' +
    '|<\/?' + XMP      + '\\b' + ATTRS + '>' + ANY + '<\/' + XMP      + '\\s*>' +
    [%# CDATA section. Content in capturing group 1. %]
    '|<!\\[CDATA\\[(' + ANY + ')\\]\\]>' +
    [%# A loose less-than. %]
    '|<', 'g'),

    function (token, cdataContent) {
      return 'string' === typeof cdataContent ?
        cdataContent.replace(AMP, '&amp;').replace(LT, '&lt;').replace(GT, '&gt;') :
        token === '<' ? '&lt;' [%# Normalize loose less-thans. %] :
        token;
    });
}

function update_problem_snippets(problem_id, request_url) {
  var problem = $('div.problem_text#p' + problem_id);
  var snippets = problem.find('[cats-snippet]');
  if (!sid && !uid) {
    snippets.addClass('missing');
    return;
  }
  if (sid)
    request_url += ';sid=' + sid;
  if (uid)
    request_url += ';uid=' + uid;
  snippets.each(function() {
    request_url += ';snippet_names=' + this.getAttribute('cats-snippet');
  });

  var timeout_interval = 1000;
  var all_snippets_received = 0;

  var fill_snippets = function(data) {
    all_snippets_received = 1;
    snippets.each(function() {
      var snippet_data = data[this.getAttribute('cats-snippet')];
      if (snippet_data !== undefined && snippet_data !== null) {
        this.innerHTML = htmlWithCDATASectionsToHtmlWithout(snippet_data);
        if (!has_quizzes && $(this).find('Quiz').length)
          has_quizzes = true;
        if (!is_basic_math(problem))
          apply_mathjax($(this));
      }
      else
        all_snippets_received = 0;
    });
    [% IF has_static_highlight %]if (all_snippets_received) static_highlight();[% END %]
  }

  var get_snippets_data = function () {
    $.ajax({
      method: 'GET',
      url: request_url,
      [%# Prevent jQuery from suffixing names of array parameters with '[]' %]
      traditional: true,
      success: fill_snippets
    }).then(function() {
      if (all_snippets_received)
        get_last_verdicts();
      else {
        setTimeout(get_snippets_data, timeout_interval);
        timeout_interval = Math.min(timeout_interval * 2, 100000);
      }
    });
  };
  get_snippets_data();
}

function update_snippets() {
  [% FOREACH p IN problems -%]
  update_problem_snippets([% p.cpid %], '[% p.href_get_snippets %]');
  [%- END %]
}
$(update_snippets);
[% END %]

</script>
[% PROCESS includes/timing.tti %]
</body>
</html>
